<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.1" 
xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">

<!-- 
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
 -->
 	
	<display-name>pms</display-name>
    <distributable/>
	
	 <welcome-file-list>
        <welcome-file>login.jsp</welcome-file>
    </welcome-file-list>
  
	<!-- Context Configuration locations for Spring XML files -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>         
            classpath*:*/*applicationContext*.xml
            /WEB-INF/applicationContext*.xml
            <!-- /WEB-INF/security.xml --> 
        </param-value>
    </context-param>

  	<!-- static_resources开头的路径，默认链接静态资源文件 -->
	<servlet-mapping>  
		<servlet-name>default</servlet-name>  
		<url-pattern>/static_resources</url-pattern>  
	</servlet-mapping>  
	
    <!-- 扫描配置文件 -->
     <context-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>classpath:*applicationContext*.xml</param-value>
 	 </context-param>
 	 
 	 <!-- 编码 -->
 	 <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
     <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
	<!-- spring mvc配置开始  -->
	<!-- 
	Springmvc本质上就是一个Servlet,DispatcherServle就是Springmvc的入口。
	在配置DispatcherServle的时候可以设置contextConfigLocation来指定springmvc配置文件的位置，
	如果不配置，默认使用WEB-INF/[ServletName]-servlet.xml
	 -->
    <servlet>
        <servlet-name>main</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
        	<param-name>contextConfigLocation</param-name>
        	<param-value>WEB-INF/config/main-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
        <!-- 当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；
		当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。
		正数的值越小，启动该servlet的优先级越高。
        <load-on-startup>1</load-on-startup> -->
    </servlet>
    <servlet-mapping>
        <servlet-name>main</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
     
    <!-- spring mvc配置结束  -->


	<!-- 登陆验证码Kaptcha 2-->
	<servlet>
		<servlet-name>Kaptcha</servlet-name>
		<!-- 
		自己实现的验证码：数字运算
		<servlet-class>tao.pms.servlet.captcha.KaptchaServlet</servlet-class> 
		-->
		<servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
		<init-param>
			<description>图片边框，合法值：yes , no</description>
			<param-name>kaptcha.border</param-name>
			<param-value>yes</param-value>
		</init-param>
		<init-param>
			<description>
				边框颜色，合法值： r,g,b (and optional alpha) 或者
				white,black,blue.
			</description>
			<param-name>kaptcha.border.color</param-name>
			<param-value>black</param-value>
		</init-param>
		<init-param>
			<description>边框厚度，合法值：>0</description>
			<param-name>kaptcha.border.thickness</param-name>
			<param-value>1</param-value>
		</init-param>
		<init-param>
			<description>图片宽 </description>
			<param-name>kaptcha.image.width</param-name>
			<param-value>110</param-value>
		</init-param>
		<init-param>
			<description>图片高 </description>
			<param-name>kaptcha.image.height</param-name>
			<param-value>40</param-value>
		</init-param>
		<init-param>
			<description>图片实现类</description>
			<param-name>kaptcha.producer.impl</param-name>
			<param-value>
				com.google.code.kaptcha.impl.DefaultKaptcha
			</param-value>
		</init-param>
		<init-param>
			<description>文本实现类</description>
			<param-name>kaptcha.textproducer.impl</param-name>
			<param-value>
				com.google.code.kaptcha.text.impl.DefaultTextCreator
			</param-value>
		</init-param>
		<init-param>
			<description>文本集合，验证码值从此集合中获取</description>
			<param-name>kaptcha.textproducer.char.string</param-name>
			<param-value>1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$%</param-value>
			  <!--<param-value>abcde2345678gfynmnpwx</param-value>-->
			<!--<param-value>慕课网教程验证码实例</param-value> -->
		</init-param>
		<init-param>
			<description>验证码长度</description>
			<param-name>kaptcha.textproducer.char.length</param-name>
			<param-value>4</param-value>
		</init-param>
		<init-param>
			<description>字体 Arial, Courier</description>
			<param-name>kaptcha.textproducer.font.names</param-name>
			<param-value>Arial, Courier</param-value>
		</init-param>
		<init-param>
			<description>字体大小 px</description>
			<param-name>kaptcha.textproducer.font.size</param-name>
			<param-value>30</param-value>
		</init-param>
		<init-param>
			<description>
				字体颜色，合法值： r,g,b 或者 white,black,blue.
			</description>
			<param-name>kaptcha.textproducer.font.color</param-name>
			<param-value>black</param-value>
		</init-param>
		<init-param>
			<description>文字间隔</description>
			<param-name>kaptcha.textproducer.char.space</param-name>
			<param-value>3</param-value>
		</init-param>
		<init-param>
			<description>干扰实现类</description>
			<param-name>kaptcha.noise.impl</param-name>
			<param-value>
				<!-- com.google.code.kaptcha.impl.NoNoise -->
				com.google.code.kaptcha.impl.DefaultNoise
			</param-value>
		</init-param>
		<init-param>
			<description>
				干扰颜色，合法值： r,g,b 或者 white,black,blue.
			</description>
			<param-name>kaptcha.noise.color</param-name>
			<param-value>blue</param-value>
		</init-param>
		<init-param>
			<description>
				图片样式： 
				水纹com.google.code.kaptcha.impl.WaterRipple
				鱼眼com.google.code.kaptcha.impl.FishEyeGimpy
				阴影com.google.code.kaptcha.impl.ShadowGimpy
			</description>
			<param-name>kaptcha.obscurificator.impl</param-name>
			<param-value>
				com.google.code.kaptcha.impl.WaterRipple
			</param-value>
		</init-param>
		<init-param>
			<description>背景实现类</description>
			<param-name>kaptcha.background.impl</param-name>
			<param-value>
				com.google.code.kaptcha.impl.DefaultBackground
			</param-value>
		</init-param>
		<init-param>
			<description>背景颜色渐变，开始颜色</description>
			<param-name>kaptcha.background.clear.from</param-name>
			<param-value>blue</param-value>
		</init-param>
		<init-param>
			<description>背景颜色渐变，结束颜色</description>
			<param-name>kaptcha.background.clear.to</param-name>
			<param-value>white</param-value>
		</init-param>
		<init-param>
			<description>文字渲染器</description>
			<param-name>kaptcha.word.impl</param-name>
			<param-value>
				com.google.code.kaptcha.text.impl.DefaultWordRenderer
			</param-value>
		</init-param>
		<init-param>
			<description>session中存放验证码的key键</description>
			<param-name>kaptcha.session.key</param-name>
			<param-value>KAPTCHA_SESSION_KEY</param-value>
		</init-param>
		<init-param>
			<description>
				The date the kaptcha is generated is put into the
				HttpSession. This is the key value for that item in the
				session.
			</description>
			<param-name>kaptcha.session.date</param-name>
			<param-value>KAPTCHA_SESSION_DATE</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>Kaptcha</servlet-name>
		<url-pattern>/randomcode.jpg</url-pattern>
	</servlet-mapping>

</web-app>
